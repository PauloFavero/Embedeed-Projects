#include "main.h"
#include "madgwick.h"
//====================================================================
#define VL6180X	0 //Luminosité et distance
#define MPU9250	1 //gyroscope
#define MPL115A_ANEMO 0 //Anemometre et pression
//====================================================================
//			CAN ACCEPTANCE FILTER
//====================================================================
#define USE_FILTER	1
// Can accept until 4 Standard IDs

#if VL6180X
#define ID_1	0x01
#define ID_2	0x02
#define ID_3	0x03
#define ID_4	0x04
#endif

#if MPU9250
#define ID_1	0x05
#define ID_2	0x06
#define ID_3	0x07
#define ID_4	0x08
#endif

#if MPL115A_ANEMO
#define ID_1	0x09
#define ID_2	0x0A
#define ID_3	0x0B
#define ID_4	0x0C
#endif
//====================================================================
extern void systemClock_Config(void);

void (*rxCompleteCallback)(void);
void can_callback(void);

CAN_Message rxMsg;
CAN_Message txMsg;
long int counter = 0;

uint8_t* aTxBuffer[2];

extern float magCalibration[3];

void VL618x_Init(void);
void VL6180x_Step(void);

int status;
int new_switch_state;
int switch_state = -1;
int vit = 0;
int16_t acc_data[3]={0,0,0};
float acc_float[3]={0.0,0.0,0.0};
int16_t gyro_data[3]={0,0,0};
float gyro_float[3]={0.0,0.0,0.0};
float quaternions[3]={0,0,0};
float matriceR[3][3] ={{0,0,0},{0,0,0},{0,0,0}};
float eulerAngles[3]={0,0,0};
uint16_t pressure = 0;
//====================================================================
// >>>>>>>>>>>>>>>>>>>>> ANGLES EULEUR  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//====================================================================



void AnglesEuler(float matriceR[3][3], float *quaternions, float *euler){
//	R11=q02+q12−q22−q32
//	R12=2.(q1.q2−q0.q3)
//	R13=2.(q1.q3+q0.q2)

//	R21=2.(q0.q3+q1.q2)
//	R22=q0ˆ2−q1ˆ2+q2ˆ2−q3ˆ2
//	R23=2.(q2.q3−q0.q1)

//	R31=2.(q1.q3−q0.q2)
//	R32=2.(q2.q3+q0.q1)
//	R33=q02−q12−q22+q32

	matriceR[0][0] = pow(quaternions[0],2) + pow(quaternions[1],2) - pow(quaternions[2],2) - pow(quaternions[3],2);
	matriceR[0][1] = 2*(quaternions[1]*quaternions[2]-quaternions[0]*quaternions[3]);
	matriceR[0][2] = 2*(quaternions[1]*quaternions[3]+quaternions[0]*quaternions[2]);

	matriceR[1][0] = 2*(quaternions[0]*quaternions[3]+quaternions[1]*quaternions[2]);
	matriceR[1][1] = pow(quaternions[0],2) - pow(quaternions[1],2) + pow(quaternions[2],2) - pow(quaternions[3],2);
	matriceR[1][2] = 2*(quaternions[2]*quaternions[3]-quaternions[0]*quaternions[1]);

	matriceR[2][0] = 2*(quaternions[1]*quaternions[3]-quaternions[0]*quaternions[2]);
	matriceR[2][1] = 2*(quaternions[2]*quaternions[3]+quaternions[0]*quaternions[1]);
	matriceR[2][2] = pow(quaternions[0],2) - pow(quaternions[1],2) - pow(quaternions[2],2) + pow(quaternions[3],2);

//	ϕ=atan2(−R31,R33)
//	θ=asin(R32)
//	ψ=atan2(−R12,R22)

	//les angles d'euler
	euler[0] = atan2(-matriceR[2][0],matriceR[2][2]);
	euler[1] = asin(matriceR[2][1]);
	euler[2] = atan2(-matriceR[0][1],matriceR[1][1]);
	return;
}

//====================================================================
// >>>>>>>>>>>>>>>>>>>>>>>>>> MAIN <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//====================================================================
int main(void) {
	HAL_Init();
	systemClock_Config();
	SysTick_Config(HAL_RCC_GetHCLKFreq() / 1000); //SysTick end of count event each 1ms
	uart2_Init();

#if VL6180X || MPU9250
	i2c1_Init();
#endif

	HAL_Delay(1000); // Wait

#if MPL115A_ANEMO
	spi1_Init();
	anemo_Timer1Init();
#endif

#if VL6180X
	VL6180x_Init();
#endif

#if MPU9250
	mpu9250_InitMPU9250();
	mpu9250_CalibrateMPU9250();
#if USE_MAGNETOMETER
	uint8_t response_mag=0;
	mpu9250_InitAK8963(magCalibration);
	response_mag = mpu9250_MagWhoAmI();
#endif
	uint8_t response_accel_gryo = 0;
	response_accel_gryo = mpu9250_WhoAmI();

	term_printf(" Response Accel: %d", response_accel_gryo);
#endif

	can_Init();
	can_SetFreq(CAN_BAUDRATE); // CAN BAUDRATE : 500 MHz -- cf Inc/config.h
#if USE_FILTER
	can_Filter_list((ID_1 << 21) | (ID_2 << 5), (ID_3 << 21) | (ID_4 << 5),
			CANStandard, 0); // Accept until 4 Standard IDs
#else
			can_Filter_disable(); // Accept everybody
#endif
	can_IrqInit();
	can_IrqSet(&can_callback);

#if VL6180X
	tickTimer_Init(100); // period in ms
#endif

#if MPU9250
	tickTimer_Init(10); // period in ms
#endif

#if MPL115A_ANEMO
	tickTimer_Init(300); // period in ms
#endif

	//Message initial
	txMsg.id = 0x55;
	for (int i = 0; i < 8; i++) {
		txMsg.data[i] = i;
	}
	txMsg.len = 8;
	txMsg.format = CANStandard;
	txMsg.type = CANData;

	can_Write(txMsg);

	while (1) {

#if VL6180X
		VL6180x_Step();

#endif
#if MPL115A_ANEMO
		//Mesure de pression
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
		spi1_Transfer(CONVERT);
		spi1_Transfer(REFRESH);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
		HAL_Delay(15);//13ms delay datasheet

		pressure = mpl115a1_CalculatePressure();

		HAL_Delay(100);
#endif

#if MPU9250



#endif

	}
	return 0;
}


//====================================================================
//			CAN CALLBACK RECEPT
//====================================================================

void can_callback(void) {

#if VL6180X
	CAN_Message msg_rcv;
	int i=0;

	can_Read(&msg_rcv);
	txMsg.id=0x55;			// Identifiant du message à envoyer

	for(i=0;i<8;i++)
	{
		txMsg.data[i]=msg_rcv.data[i]+1;
	}
	txMsg.len=8;			// Nombre d'octets à envoyer
	txMsg.format=CANStandard;
	txMsg.type=CANData;

	can_Write(txMsg);

#endif

#if MPL115A_ANEMO

	CAN_Message msg_rcv;
	int i=0;

	can_Read(&msg_rcv);

	if(txMsg.id== msg_rcv.id) {
		txMsg.len=8;			// Nombre d'octets à envoyer
		txMsg.format=CANStandard;
		txMsg.type=CANData;

		can_Write(txMsg);

	}
#endif

#if MPU9250

#endif
}


//====================================================================
//			TIMER CALLBACK PERIOD
//====================================================================

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {

#if MPU9250

	mpu9250_Step(acc_data,gyro_data);
			//Modifier la fonction mpu9250_Step pour utiliser l'erreur bias et pas utiliser les fonctions READ
			//mpu9250_ReadAccelData(acc_data);
			//mpu9250_ReadGyroData(gyro_data);

			for (int i = 0; i < 3; i++) {

				acc_float[i] = (float) ((4.0 / 32768.0) * acc_data[i]);
				gyro_float[i] = (float) (((1000.0 / 32768.0) * (M_PI / 180.0))
						* gyro_data[i]);
			}
			//On utilise 0.0 pour les donnes du magnetometre
			// J'ai parle avec Monsieur Kerhoas et il ma dit quelque chose à propos de le temp de calcul et
			//la frequence d'algorithm de madgwick et je ne suviens plus.
			//Je crois que il faut faire ce calcul dans l'interruption du timer dans la meme freq  sampleFreq  100.0f
			// sample frequency in Hz
			MadgwickAHRSupdate(gyro_float[0], gyro_float[1],
					gyro_float[2], acc_float[0], acc_float[1], acc_float[2], 0.0, 0.0,
					0.0,quaternions);

			AnglesEuler(matriceR,quaternions,eulerAngles);

	term_printf("AccX=%d, \n\r AccY=%d, \n\r AccZ=%d, \n\r ", (int16_t)(1000*eulerAngles[0]),
			(int16_t)(1000*eulerAngles[1]), (int16_t)(1000*eulerAngles[2]));
	//term_printf("GyroX=%g, \n\r GyroY=%g, \n\r GyroZ=%g, \n\r ", gyro_float[0],
	//		gyro_float[1], gyro_float[2]);

	txMsg.id = ID_1;
	txMsg.len = 6;
	txMsg.format = CANStandard;
	txMsg.type = CANData;
	txMsg.data[0] = (int16_t)1000*eulerAngles[0]; //int16_t
	txMsg.data[1] = (int16_t)1000*eulerAngles[0];
	txMsg.data[2] = (int16_t)1000*eulerAngles[1];
	txMsg.data[3] = (int16_t)1000*eulerAngles[1];
	txMsg.data[4] = (int16_t)1000*eulerAngles[2];
	txMsg.data[5] = (int16_t)1000*eulerAngles[2];
	can_Write(txMsg);
#endif

#if MPL115A_ANEMO
	int vitesseAnemo = 0;
	vitesseAnemo= anemo_GetCount();

	//term_printf("V= %d impulses\n\r ",vitesseAnemo);
	vit = vitesseAnemo*10/4;
	term_printf("Vitese=%d \n\r ",vit);
	anemo_ResetCount();

	txMsg.id=ID_1;
	txMsg.len=2;
	txMsg.format=CANStandard;
	txMsg.type=CANData;
	txMsg.data[0] = pressure;//uint16_t
	txMsg.data[1] = vit;//int32
	can_Write(txMsg);

#endif

#if VL6180X

	//il faut corrigir cela. On peut faire un QT pour recevoir
	//le bonne taile des donnes sans avoir besoi
	// de faire un pretraitement
	txMsg.id=ID_2;

	for(int i = 0; i < 2; i++)
	{
		txMsg.data[i] = (uint8_t)(Als.lux>> i*8);
	}
	txMsg.data[2] = (uint8_t)(Range.range_mm);

	txMsg.len=3;
	txMsg.format=CANStandard;
	txMsg.type=CANData;

	can_Write(txMsg);
	HAL_Delay(5);

#endif

}
//====================================================================

void VL6180x_Init(void) {
	uint8_t id;
	State.mode = 1;

	XNUCLEO6180XA1_Init();
	HAL_Delay(500); // Wait
	// RESET
	XNUCLEO6180XA1_Reset(0);
	HAL_Delay(10);
	XNUCLEO6180XA1_Reset(1);
	HAL_Delay(1);

	HAL_Delay(10);
	VL6180x_WaitDeviceBooted(theVL6180xDev);
	id = VL6180x_Identification(theVL6180xDev);
	term_printf("id=%d, should be 180 (0xB4) \n\r", id);
	VL6180x_InitData(theVL6180xDev);

	State.InitScale = VL6180x_UpscaleGetScaling(theVL6180xDev);
	State.FilterEn = VL6180x_FilterGetState(theVL6180xDev);

	// Enable Dmax calculation only if value is displayed (to save computation power)
	VL6180x_DMaxSetState(theVL6180xDev, DMaxDispTime > 0);

	switch_state = -1; // force what read from switch to set new working mode
	State.mode = AlrmStart;
}
//====================================================================
void VL6180x_Step(void) {
	DISP_ExecLoopBody();

	new_switch_state = XNUCLEO6180XA1_GetSwitch();
	if (new_switch_state != switch_state) {
		switch_state = new_switch_state;
		status = VL6180x_Prepare(theVL6180xDev);
		// Increase convergence time to the max (this is because proximity config of API is used)
		VL6180x_RangeSetMaxConvergenceTime(theVL6180xDev, 63);
		if (status) {
			AbortErr("ErIn");
		} else {
			if (switch_state == SWITCH_VAL_RANGING) {
				VL6180x_SetupGPIO1(theVL6180xDev,
						GPIOx_SELECT_GPIO_INTERRUPT_OUTPUT, INTR_POL_HIGH);
				VL6180x_ClearAllInterrupt(theVL6180xDev);
				State.ScaleSwapCnt = 0;
				DoScalingSwap(State.InitScale);
			} else {
				State.mode = RunAlsPoll;
				InitAlsMode();
			}
		}
	}

	switch (State.mode) {
	case RunRangePoll:
		RangeState();
		break;

	case RunAlsPoll:
		AlsState();
		break;

	case InitErr:
		TimeStarted = g_TickCnt;
		State.mode = WaitForReset;
		break;

	case AlrmStart:
		GoToAlaramState();
		break;

	case AlrmRun:
		AlarmState();
		break;

	case FromSwitch:
		// force reading swicth as re-init selected mode
		switch_state = !XNUCLEO6180XA1_GetSwitch();
		break;

	case ScaleSwap:

		if (g_TickCnt - TimeStarted >= ScaleDispTime) {
			State.mode = RunRangePoll;
			TimeStarted = g_TickCnt; /* reset as used for --- to er display */
		} else {
			DISP_ExecLoopBody();
		}
		break;

	default: {
		DISP_ExecLoopBody();
		if (g_TickCnt - TimeStarted >= 5000) {
			NVIC_SystemReset();
		}
	}
	}
}
//====================================================================

